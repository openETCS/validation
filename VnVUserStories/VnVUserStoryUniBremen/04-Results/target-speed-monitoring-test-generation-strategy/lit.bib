
	
@book{clarke_em-etal:1999a,
	Address = {Cambridge, Massachusetts},
	Author = {Clarke, Edmund M. and Grumberg, Orna and Peled, Doron A.},
	Isbn = {0262032708},
	Publisher = {The {MIT} Press},
	Title = {Model Checking},
	Topic = {model-checking;program-verification;},
	Year = {1999}}
	
@article{harel96,
	Author = {David Harel and Amnon Naamad},
	Journal = {ACM Transactions on Software Engineering and Methodology},
	Month = {October},
	Number = {4},
	Pages = {293-333},
	Title = {The Statemate Semantics of Statecharts},
	Volume = {5},
	Year = {1996}}
	
	
	
@misc{ETCS,
	Author = {{European Railway Agency}},
	Language = {English},
	Lastchecked = {February 19, 2012},
	Month = {February},
	Title = {{ERTMS -- System Requirements Specification -- UNISIG SUBSET-026}},
	note = {Available under http://www.era.europa.eu/Document-Register/Pages/Set-2-System-Requirements-Specification.aspx},
	Urldate = {February 19, 2013},
	Year = {2012},
	}

@misc{ETCSFRS,
	Annote = {ERA/ERTMS/00304},
	Author = {{European Railway Agency}},
	Month = {July},
	Note = {Version 5.0},
	Title = {{ERTMS/ETCS Functional Requirements Specification FRS}},
	Year = {2007}}


@inbook{ETCSSRS-Introduction,
	Author = {{UNISIG}},
	Chapter = {1},
	Crossref = {ETCSSRS},
	Editor = {{UNISIG}},
	Title = {{Introduction}},
	Volume = {{Subset-026-1}},
	Year = {2006}}

@inbook{ETCSSRS-SystemDescription,
	Author = {{UNISIG}},
	Chapter = {2},
	Crossref = {ETCSSRS},
	Editor = {{UNISIG}},
	Title = {{Basic System Description}},
	Volume = {{Subset-026-2}},
	Year = {2006}}

@inbook{ETCSSRS-Principles,
	Author = {{UNISIG}},
	Chapter = {3},
	Crossref = {ETCSSRS},
	Note = {Issue 3.3.0},
	Title = {{ERTMS/ETCS System Requirements Specification, Chapter~3, Principles}},
	Volume = {{Subset-026-3}},
	Year = {2012}}

@inbook{ETCSSRS-ModesAndTransitions,
	Author = {{UNISIG}},
	Chapter = {4},
	Crossref = {ETCSSRS},
	Editor = {{UNISIG}},
	Title = {{Modes and Transitions}},
	Volume = {{Subset-026-4}},
	Year = {2006}}

@inbook{ETCSSRS-Procedures,
	Author = {{UNISIG}},
	Chapter = {5},
	Crossref = {ETCSSRS},
	Editor = {{UNISIG}},
	Title = {{Procedures}},
	Volume = {{Subset-026-5}},
	Year = {2006}}

@inbook{ETCSSRS-Language,
	Chapter = {7},
	Crossref = {ETCSSRS},
	Editor = {{UNISIG}},
	Title = {{ERTMS / ETCS Language}},
	Volume = {{Subset-026-7}},
	Year = {2006}}

@inbook{ETCSSRS-Messages,
	Chapter = {8},
	Crossref = {ETCSSRS},
	Editor = {{UNISIG}},
	Title = {{Messages}},
	Volume = {{Subset-026-8}},
	Year = {2006}}




@book{ETCSSRS,
	Editor = {{UNISIG}},
	Month = {February},
	Note = {{Issue 2.3.0}},
	Title = {{ERTMS/ETCS -- Class 1 System Requirements Specification}},
	Volume = {{Subset-026}},
	Year = {2006}}



@article{alur01hierarchical,
	Author = {R. Alur and T. Dang and J. Esposito and R. Fierro and Y. Hur and F. Ivan{\v{c}}i{\'c} and V. Kumar and I. Lee and P. Mishra and G. Pappas and O. Sokolsky},
	Journal = {Lecture Notes in Computer Science},
	Pages = {14--31},
	Title = {Hierarchical Hybrid Modeling of Embedded Systems},
	Volume = {2211},
	Year = {2001}}

@inproceedings{petrenko_testing_2014,
	title = {Adaptive Testing of Nondeterministic Systems with FSM},
	pages = {224--28},
	booktitle = { 2014 IEEE 15th International Symposium on High-Assurance Systems Engineering (HASE)},
	publisher = {},
	author = {Petrenko, A. and Yevtushenko, N. },
	year = {2014}
	}



@article{hierons_testing_2004,
  author    = {Robert M. Hierons},
  title     = {Testing from a Nondeterministic Finite State Machine Using Adaptive
               State Counting},
  journal   = {{IEEE} Trans. Computers},
  volume    = {53},
  number    = {10},
  pages     = {1330--1342},
  year      = {2004},
  url       = {http://doi.ieeecomputersociety.org/10.1109/TC.2004.85},
  doi       = {10.1109/TC.2004.85},
  timestamp = {Wed, 25 Aug 2004 15:16:31 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/tc/Hierons04},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}





@inproceedings{Hen96,
	Author = {T.A. Henzinger},
	Booktitle = {Proceedings of the 11th Annual Symposium on Logic in Computer Science},
	Pages = {278--292},
	Publisher = {IEEE Computer Society Press},
	Title = {The theory of hybrid automata},
	Year = {1996}}
	
	
	
	@inproceedings{pelnfm2011,
	Address = {Pasadena, CA, USA},
	Author = {Jan Peleska and Elena Vorobev and Florian Lapschies},
	Booktitle = {Nasa Formal Methods, Third International Symposium, NFM 2011},
	Editor = {Mihaela Bobaru and Klaus Havelund and Gerard J. Holzmann and Rajeev Joshi},
	Month = {April},
	Pages = {298-312},
	Publisher = {Springer},
	Series = {LNCS},
	Title = {Automated Test Case Generation with {SMT}-Solving and Abstract Interpretation},
	Volume = {6617},
	Year = {2011}}




@techreport{SysML15,
	Author = {{Object Management Group}},
	Institution = {{Object Management Group}},
	Note = {http://www.omg.org/spec/SysML/1.4},
	Title = {{OMG Systems Modeling Language (OMG SysML{\texttrademark}), Version 1.4}},
	Year = {2015}}
	
	
	
@techreport{huang_test_2013,
	title = {Test Automation Support},
	number = {D34.1},
	institution = {{COMPASS} Comprehensive Modelling for Advanced Systems of Systems},
	author = {Huang, Wen-ling and Peleska, Jan and Schulze, Uwe},
	year = {2013},
	note = {Available under {\tt  http://www.compass-research.eu/deliverables.html}}
}



@inproceedings{EPTCS111.1,
	Author = {Peleska, Jan},
	Booktitle = {{\rm Proceedings Eighth Workshop on} Model-Based Testing, {\rm Rome, Italy, 17th March 2013}},
	Doi = {10.4204/EPTCS.111.1},
	Editor = {Petrenko, Alexander K. and Schlingloff, Holger},
	Pages = {3-28},
	Publisher = {Open Publishing Association},
	Series = {Electronic Proceedings in Theoretical Computer Science},
	Title = {Industrial-Strength Model-Based Testing - State of the Art and Current Challenges},
	Volume = {111},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.4204/EPTCS.111.1}}








@article{Petrenko:2012:MTS:2347096.2347101,
 author = {Petrenko, Alexandre and Simao, Adenilso and Maldonado, Jos{\'e} Carlos},
 title = {Model-based Testing of Software and Systems: Recent Advances and Challenges},
 journal = {Int. J. Softw. Tools Technol. Transf.},
 issue_date = {August 2012},
 volume = {14},
 number = {4},
 month = aug,
 year = {2012},
 issn = {1433-2779},
 pages = {383--386},
 numpages = {4},
 url = {http://dx.doi.org/10.1007/s10009-012-0240-3},
 doi = {10.1007/s10009-012-0240-3},
 acmid = {2347101},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {Model-based testing},
} 



@article{anand_orchestrated_2013,
  title = {An orchestrated survey of methodologies for automated software test case generation},
  volume = {86},
  issn = {0164-1212},
  url = {http://www.sciencedirect.com/science/article/pii/S0164121213000563},
  doi = {10.1016/j.jss.2013.02.061},
  abstract = {Test case generation is among the most labour-intensive tasks in software testing. It also has a strong impact on the effectiveness and efficiency of software testing. For these reasons, it has been one of the most active research topics in software testing for several decades, resulting in many different approaches and tools. This paper presents an orchestrated survey of the most prominent techniques for automatic generation of software test cases, reviewed in self-standing sections. The techniques presented include: (a) structural testing using symbolic execution, (b) model-based testing, (c) combinatorial testing, (d) random testing and its variant of adaptive random testing, and (e) search-based testing. Each section is contributed by world-renowned active researchers on the technique, and briefly covers the basic ideas underlying the method, the current state of the art, a discussion of the open research problems, and a perspective of the future development of the approach. As a whole, the paper aims at giving an introductory, up-to-date and (relatively) short overview of research in automatic test case generation, while ensuring a comprehensive and authoritative treatment.},
  timestamp = {2015-11-22T00:30:28Z},
  number = {8},
  urldate = {2015-11-22},
  journal = {Journal of {Systems} and {Software}},
  author = {{Anand}, Saswat and {Burke}, Edmund K. and {Chen}, Tsong Yueh and {Clark}, John and {Cohen}, Myra B. and {Grieskamp}, Wolfgang and {Harman}, Mark and {Harrold}, Mary Jean and {McMinn}, Phil and {Bertolino}, Antonia and {Jenny Li}, J. and {Zhu}, Hong},
  month = aug,
  year = {2013},
  keywords = {Adaptive random testing,Combinatorial testing,model-based testing,Orchestrated survey,Search-based software testing,Software testing,Symbolic execution,Test automation,Test case generation},
  pages = {1978--2001},
  file = {Anand et al_2013_An orchestrated survey of methodologies for automated software test case.pdf:/home/chilken/repositories/git/thesis/zotero/storage/8JKVQ7XF/Anand et al_2013_An orchestrated survey of methodologies for automated software test case.pdf:application/pdf;ScienceDirect Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/ZRTQCEWQ/S0164121213000563.html:}
}

@article{cengarle_system_2014-1,
  title = {System model semantics of statecharts},
  url = {http://arxiv.org/abs/1409.6636},
  timestamp = {2015-11-21T21:14:16Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6636},
  author = {{Cengarle}, Mar{\'\i}a Victoria and {Gr{\"o}nninger}, Hans and {Rumpe}, Bernhard},
  year = {2014},
  file = {Cengarle et al_2014_System model semantics of statecharts.pdf:/home/chilken/repositories/git/thesis/zotero/storage/5RHZ732S/Cengarle et al_2014_System model semantics of statecharts.pdf:application/pdf;Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/EXF89EKD/1409.html:}
}

@article{schieferdecker_modelbased_2012,
  title = {Model-{Based} {Testing}},
  volume = {29},
  issn = {0740-7459},
  doi = {10.1109/MS.2012.13},
  abstract = {Model-based testing (MBT) strives to automatically and systematically generate test cases. In this column, Ina Schieferdecker introduces MBT technologies and methods.},
  timestamp = {2015-11-22T01:13:27Z},
  number = {1},
  journal = {{IEEE} {Software}},
  author = {{Schieferdecker}, I.},
  month = jan,
  year = {2012},
  keywords = {engineering,MBT,methods Fokus!MBT,model-based testing,Modeling,program testing,Software,Software design,Software testing,technology,Testing,tools},
  pages = {14--18},
  file = {Schieferdecker_2012_Model-Based Testing.pdf:/home/chilken/repositories/git/thesis/zotero/storage/4WFR7C62/Schieferdecker_2012_Model-Based Testing.pdf:application/pdf;IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/6CIWC6ZD/abs_all.html:}
}

@article{cengarle_system_2014,
  title = {System model semantics of class diagrams},
  url = {http://arxiv.org/abs/1409.6635},
  timestamp = {2015-11-21T21:14:09Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6635},
  author = {{Cengarle}, Mar{\'\i}a Victoria and {Gr{\"o}nninger}, Hans and {Rumpe}, Bernhard},
  year = {2014},
  file = {Cengarle et al_2014_System model semantics of class diagrams.pdf:/home/chilken/repositories/git/thesis/zotero/storage/HP4XDZG7/Cengarle et al_2014_System model semantics of class diagrams.pdf:application/pdf;Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/VKFTJE2X/1409.html:}
}

@article{paredis_551_2010,
  title = {5.5.1 {An} {Overview} of the {SysML}-{Modelica} {Transformation} {Specification}},
  volume = {20},
  copyright = {{\textcopyright} 2010 {The} {Authors}},
  issn = {2334-5837},
  url = {http://onlinelibrary.wiley.com/doi/10.1002/j.2334-5837.2010.tb01099.x/abstract},
  doi = {10.1002/j.2334-5837.2010.tb01099.x},
  abstract = {This paper provides an overview of the formal transformation between the two complementary languages: OMG SysML{\texttrademark} and Modelica. SysML is a standardized general purpose graphical modeling language for capturing complex system descriptions in terms of their structure, behavior, properties, and requirements. Modelica is a standardized general purpose systems modeling language for analyzing the continuous and discrete time dynamics of complex systems in terms of differential algebraic equations. Integrating the descriptive power of SysML models with the analytic and computational power of Modelica models provides a capability that is significantly greater than provided by SysML or Modelica individually. A standardized bi-directional transformation between the two modeling languages is being developed that will support implementations to transfer efficiently and automatically the modeling information between SysML and Modelica models without ambiguity. In addition to an overview of this bi-directional transformation approach, the paper provides a simple example to clarify the transformation principles and to illustrate the important synergies resulting from the integration between these two languages.},
  language = {en},
  timestamp = {2015-11-20T11:32:32Z},
  number = {1},
  urldate = {2015-11-20},
  journal = {{INCOSE} {International} {Symposium}},
  author = {{Paredis}, Christiaan J.J. and {Bernard}, Yves and {Burkhart}, Roger M and {de Koning}, Hans-Peter and {Friedenthal}, Sanford and {Fritzson}, Peter and {Rouquette}, Nicolas F and {Schamai}, Wladimir},
  month = jul,
  year = {2010},
  pages = {709--722},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/EAG4ZMVR/abstract.html:}
}

@article{evans_developing_2014-1,
  title = {Developing the {UML} as a formal modelling notation},
  url = {http://arxiv.org/abs/1409.6928},
  timestamp = {2015-11-21T22:08:52Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6928},
  author = {{Evans}, Andy and {France}, Robert and {Lano}, Kevin and {Rumpe}, Bernhard},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/5C3VGEXM/1409.html:;Evans et al_2014_Developing the UML as a formal modelling notation.pdf:/home/chilken/repositories/git/thesis/zotero/storage/G8E326KE/Evans et al_2014_Developing the UML as a formal modelling notation.pdf:application/pdf}
}

@inproceedings{abbors_tracing_2009,
  title = {Tracing {Requirements} in a {Model}-{Based} {Testing} {Approach}},
  doi = {10.1109/VALID.2009.15},
  abstract = {In this paper we discuss an approach for requirements traceability in a model-based testing process. We show how the informal requirements of the system under test evolve and are traced at different steps of the process. More specifically, we discuss how requirements are traced to system specifications and from system specification to tests during the test generation process, and then how the test results are analyzed and traced back the specification of the system. The approach allows us to have both a fast feed-back loop for debugging either the specification or the implementation of the system and a way to estimate the coverage degree of the generated tests with respect to requirements. We discuss tool support for the approach and exemplify with excerpts from a case study in the telecommunications domain.},
  timestamp = {2015-11-20T11:35:21Z},
  booktitle = {First {International} {Conference} on {Advances} in {System} {Testing} and {Validation} {Lifecycle}, 2009. {VALID} '09},
  author = {{Abbors}, F. and {Truscan}, D. and {Lilius}, J.},
  month = sep,
  year = {2009},
  keywords = {Automatic testing,Automation,Debugging,Feedback loop,formal specification,Information technology,Life testing,model-based testing,program debugging,program testing,Requirements,requirement traceability,Software systems,Software testing,system debugging,system specification,System testing,Time to market,Traceability},
  pages = {123--128},
  file = {Abbors et al_2009_Tracing Requirements in a Model-Based Testing Approach.pdf:/home/chilken/repositories/git/thesis/zotero/storage/23DZRCU4/Abbors et al_2009_Tracing Requirements in a Model-Based Testing Approach.pdf:application/pdf;IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/MFG8GFAK/abs_all.html:}
}

@article{ringert_montiarcautomaton_2014,
  title = {{MontiArcAutomaton}: {Modeling} {Architecture} and {Behavior} of {Robotic} {Systems}},
  shorttitle = {{MontiArcAutomaton}},
  url = {http://arxiv.org/abs/1409.2310},
  timestamp = {2015-11-21T21:13:57Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.2310},
  author = {{Ringert}, Jan Oliver and {Rumpe}, Bernhard and {Wortmann}, Andreas},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/32QJJQU4/1409.html:;Ringert et al_2014_MontiArcAutomaton.pdf:/home/chilken/repositories/git/thesis/zotero/storage/J836ZPTU/Ringert et al_2014_MontiArcAutomaton.pdf:application/pdf}
}

@article{hampson_technical_2015,
  series = {2015 {Conference} on {Systems} {Engineering} {Research}},
  title = {Technical {Evaluation} of the {Systems} {Modeling} {Language} ({SysML})},
  volume = {44},
  issn = {1877-0509},
  url = {http://www.sciencedirect.com/science/article/pii/S1877050915002902},
  doi = {10.1016/j.procs.2015.03.054},
  abstract = {The intent of this paper is to provide a brief description and critique on each of the 4 pillars of SysML. The description will cover in detail the type of modeling elements used in each pillar, the relationships between these elements, and the views used to represent the model data. The analysis and critique offered will follow the description for each pillar and is primarily from a functional perspective, covering the strengths, weaknesses and identified gaps in the language. In some cases, a recommendation for potential improvement will be provided. Additional modeling gaps that apply across all pillars will also be identified and discussed. Addressing current gaps in SysML would improve our capabilities to accurately represent a system in a modeling format and help better communicate the model to customers in support of a life cycle systems engineering process.},
  timestamp = {2015-11-20T11:31:42Z},
  urldate = {2015-11-20},
  journal = {Procedia {Computer} {Science}},
  author = {{Hampson}, Kyle},
  year = {2015},
  keywords = {Architecture,MBSE,SysML,Systems Model},
  pages = {403--412},
  file = {ScienceDirect Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/C3KB353A/S1877050915002902.html:;Hampson_2015_Technical Evaluation of the Systems Modeling Language (SysML).pdf:/home/chilken/repositories/git/thesis/zotero/storage/JIUNMEEF/Hampson_2015_Technical Evaluation of the Systems Modeling Language (SysML).pdf:application/pdf}
}

@misc{schamai_unified_2009,
  title = {Towards {Unified} {System} {Modeling} and {Simulation} with {ModelicaML}: {Modeling} of {Executable} {Behavior} {Using} {Graphical} {Notations}},
  shorttitle = {Towards {Unified} {System} {Modeling} and {Simulation} with {ModelicaML}},
  timestamp = {2015-11-22T02:05:11Z},
  author = {{Schamai}, Wladimir},
  year = {2009},
  file = {Schamai_2009_Towards Unified System Modeling and Simulation with ModelicaML.pdf:/home/chilken/repositories/git/thesis/zotero/storage/542Z29MI/Schamai_2009_Towards Unified System Modeling and Simulation with ModelicaML.pdf:application/pdf;Towards Unified System Modeling and Simulation with ModelicaML\: Modeling of Executable Behavior Using Graphical Notations | Model-Based Systems Engineering Center:/home/chilken/repositories/git/thesis/zotero/storage/QAF3DRPR/towards-unified-system-modeling-and-simulation-modelicaml-modeling-executable-behavior-using-gr.html:}
}

@article{ouchani_generating_2015,
  title = {Generating attacks in {SysML} activity diagrams by detecting attack surfaces},
  volume = {6},
  issn = {1868-5137, 1868-5145},
  url = {http://link.springer.com/article/10.1007/s12652-015-0269-8},
  doi = {10.1007/s12652-015-0269-8},
  abstract = {In the development process of a secure system is essential to detect as early as possible the system's vulnerable points, the so called attack surfaces, and to estimate how feasible it would be that known attacks breach through them. Even if attack surfaces can be sometimes detected automatically, mapping them against known attacks still is a step apart. Systems and attacks are not usually modelled in compatible formalisms. We develop a practical framework that automates the whole process. We formalize a system as SysML activity diagrams and in the same formalism we model libraries of patterns taken from standard catalogues of social engineering and technical attacks. An algorithm that we define, navigates the system's diagrams in search for its attack surfaces; then it evaluates the possibility and the probability that the detected weak points host attacks among those in the modelled library. We prove the correctness and the completeness of our approach and we show how it works on a use case scenario. It represents a very common situation in the domain of communication and data security for corporations.},
  language = {en},
  timestamp = {2015-11-21T22:09:57Z},
  number = {3},
  urldate = {2015-11-21},
  journal = {Journal of {Ambient} {Intelligence} and {Humanized} {Computing}},
  author = {{Ouchani}, Samir and {Lenzini}, Gabriele},
  month = mar,
  year = {2015},
  keywords = {Artificial Intelligence (incl. Robotics),Attack patterns,Attack surfaces,Computational Intelligence,Robotics and Automation,Socio-technical security,SysML activity diagrams,Systems attacks,User Interfaces and Human Computer Interaction},
  pages = {361--373},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/K6NN2DH3/s12652-015-0269-8.html:}
}

@incollection{dick_automating_1993,
  series = {Lecture {Notes} in {Computer} {Science}},
  title = {Automating the generation and sequencing of test cases from model-based specifications},
  copyright = {{\textcopyright}1993 {Springer}-{Verlag}},
  isbn = {978-3-540-56662-5 978-3-540-47623-8},
  url = {http://link.springer.com/chapter/10.1007/BFb0024651},
  abstract = {Formal specifications contain a great deal of information that can be exploited in the testing of an implementation, either for the generation of test-cases, for sequencing the tests, or as an oracle in verifying the tests. This papers presents automatic techniques for partition analysis in state-based specifications, specifically VDM. Test domains for individual operations are calculated by reduction of their mathematical description to a Disjunctive Normal Form. Following this, a partition analysis of the system state can be performed which permits the construction of a Finite State Automaton from the specification. This, in turn, can be used to sequence the required tests in a valid and sensible way. A tool has been developed based on the techniques applied to VDM, which has been used to develop the examples presented in the paper.},
  language = {en},
  timestamp = {2015-11-22T00:54:49Z},
  number = {670},
  urldate = {2015-11-22},
  booktitle = {{FME} '93: {Industrial}-{Strength} {Formal} {Methods}},
  publisher = {{Springer Berlin Heidelberg}},
  author = {{Dick}, Jeremy and {Faivre}, Alain},
  editor = {{Woodcock}, James C. P. and {Larsen}, Peter G.},
  month = apr,
  year = {1993},
  keywords = {Business Information Systems,Logics and Meanings of Programs,Programming Techniques,Software Engineering},
  pages = {268--284},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/6RMJCZTU/10.html:;Dick_Faivre_1993_Automating the generation and sequencing of test cases from model-based.pdf:/home/chilken/repositories/git/thesis/zotero/storage/NJ53VCWM/Dick_Faivre_1993_Automating the generation and sequencing of test cases from model-based.pdf:application/pdf}
}

@article{broy_system_2014,
  title = {Towards a system model for uml. the structural data model},
  url = {http://arxiv.org/abs/1409.6613},
  timestamp = {2015-11-21T21:14:45Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6613},
  author = {{Broy}, Manfred and {Cengarle}, Mar{\'\i}a Victoria and {Rumpe}, Bernhard},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/QEFAGNEJ/1409.html:;Broy et al_2014_Towards a system model for uml.pdf:/home/chilken/repositories/git/thesis/zotero/storage/RIGIPU8U/Broy et al_2014_Towards a system model for uml.pdf:application/pdf}
}

@inproceedings{hause_testing_2010,
  title = {Testing {Safety} {Critical} {Systems} with {SysML}/{UML}},
  doi = {10.1109/ICECCS.2010.59},
  abstract = {As systems become increasingly complex and the time to market decreases, systems engineers have to develop novel solutions to testing. The scenario is particularly acute when dealing within the safety critical domain. This paper will seek to highlight how UML and in particular, improvements introduced by SysML can aid the testing process in terms of verification, validation and simulation of software, firmware and mechanical systems. This paper will highlight how UML and SysML constructs can aid testing and is based on many years experience of building and testing systems as well as the experience gained by client companies during consultation. It will highlight on a practical basis how clients have integrated testing into their UML/SysML models to improve their processes and products.},
  timestamp = {2015-11-20T11:34:52Z},
  booktitle = {2010 15th {IEEE} {International} {Conference} on {Engineering} of {Complex} {Computer} {Systems} ({ICECCS})},
  author = {{Hause}, M. and {Stuart}, A. and {Richards}, D. and {Holt}, J.},
  month = mar,
  year = {2010},
  keywords = {Computational modeling,Documentation,firmware,Flowcharts,mechanical systems,program testing,program verification,Rails,Safety,Safety Critical,safety critical domain,safety-critical software,safety critical systems,software simulation,software validation,software verification,SysML,systems testing,Testing,UML,Unified Modeling Language},
  pages = {325--330},
  annote = {They are considering RBCs of ETCS with a far more naive approach (model describes tests, not the system)},
  file = {IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/83K7GH8T/cookiedetectresponse.html:;Hause et al_2010_Testing Safety Critical Systems with SysML-UML.pdf:/home/chilken/repositories/git/thesis/zotero/storage/VWAUA2QW/Hause et al_2010_Testing Safety Critical Systems with SysML-UML.pdf:application/pdf}
}

@article{paredis_551_2010-1,
  title = {5.5.1 {An} {Overview} of the {SysML}-{Modelica} {Transformation} {Specification}},
  volume = {20},
  copyright = {{\textcopyright} 2010 {The} {Authors}},
  issn = {2334-5837},
  url = {http://onlinelibrary.wiley.com/doi/10.1002/j.2334-5837.2010.tb01099.x/abstract},
  doi = {10.1002/j.2334-5837.2010.tb01099.x},
  abstract = {This paper provides an overview of the formal transformation between the two complementary languages: OMG SysML{\texttrademark} and Modelica. SysML is a standardized general purpose graphical modeling language for capturing complex system descriptions in terms of their structure, behavior, properties, and requirements. Modelica is a standardized general purpose systems modeling language for analyzing the continuous and discrete time dynamics of complex systems in terms of differential algebraic equations. Integrating the descriptive power of SysML models with the analytic and computational power of Modelica models provides a capability that is significantly greater than provided by SysML or Modelica individually. A standardized bi-directional transformation between the two modeling languages is being developed that will support implementations to transfer efficiently and automatically the modeling information between SysML and Modelica models without ambiguity. In addition to an overview of this bi-directional transformation approach, the paper provides a simple example to clarify the transformation principles and to illustrate the important synergies resulting from the integration between these two languages.},
  language = {en},
  timestamp = {2015-11-22T02:13:40Z},
  number = {1},
  urldate = {2015-11-22},
  journal = {{INCOSE} {International} {Symposium}},
  author = {{Paredis}, Christiaan J.J. and {Bernard}, Yves and {Burkhart}, Roger M and {de Koning}, Hans-Peter and {Friedenthal}, Sanford and {Fritzson}, Peter and {Rouquette}, Nicolas F and {Schamai}, Wladimir},
  month = jul,
  year = {2010},
  pages = {709--722},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/4TAJVBJV/abstract.html:;Paredis et al_2010_5.pdf:/home/chilken/repositories/git/thesis/zotero/storage/ERMVJG43/Paredis et al_2010_5.pdf:application/pdf;Paredis et al_2010_5.pdf:/home/chilken/repositories/git/thesis/zotero/storage/WIAW4CFW/Paredis et al_2010_5.pdf:application/pdf}
}

@inproceedings{zhou_safety_2014,
  title = {{A} safety modeling method based on {SysML}},
  doi = {10.1109/ICRMS.2014.7107390},
  abstract = {As the scale and integration of the modern system increasing, the function interactions and coupling relationships in the system increase as well, which eventually makes the system complex more and more. The latent interaction hazards become more difficult to identify which make it harder to perform hazard analysis. The complex characteristics of hazard process in modern system are analyzed from different levels (i.e. same level, cross-level and multi-systems), according to which SysML is chosen to describe the hazard propagation process. A safety modeling technique based on SysML is proposed. Study the correspondence between different hazard propagation modes and SysML diagrams; Utilize SysML comprehensively and clearly to show hazard propagation. Using different SysML model figures to expound different hazard propagation modes, the safety model transformed from design model based on SysML could be acquired. Eventually, the validity of this method is demonstrated by a case study of SMR in flight control system.},
  timestamp = {2015-11-20T11:37:03Z},
  booktitle = {2014 {International} {Conference} on {Reliability}, {Maintainability} and {Safety} ({ICRMS})},
  author = {{Zhou}, Shanshan and {Jiao}, Jian and {Sun}, Qiang},
  month = aug,
  year = {2014},
  keywords = {aerospace computing,aerospace safety,Boolean functions,Couplings,Data structures,flight control system,hazard propagation,hazard propagation process,hazards,latent interaction hazards,Modeling,safety modeling,safety modeling method,SMR,SysML,System analysis and design},
  pages = {1180--1185},
  file = {IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/P3Q8E8D6/abs_all.html:;Zhou et al_2014_A safety modeling method based on SysML.pdf:/home/chilken/repositories/git/thesis/zotero/storage/RI3BAZHQ/Zhou et al_2014_A safety modeling method based on SysML.pdf:application/pdf}
}

@article{harel_statecharts_1987,
  title = {Statecharts: a visual formalism for complex systems},
  volume = {8},
  issn = {0167-6423},
  shorttitle = {Statecharts},
  url = {http://www.sciencedirect.com/science/article/pii/0167642387900359},
  doi = {10.1016/0167-6423(87)90035-9},
  abstract = {We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive{\textemdash}small diagrams can express complex behavior{\textemdash}as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system's other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.},
  timestamp = {2015-11-20T11:25:20Z},
  number = {3},
  urldate = {2015-11-20},
  journal = {Science of {Computer} {Programming}},
  author = {{Harel}, David},
  month = jun,
  year = {1987},
  pages = {231--274},
  file = {ScienceDirect Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/FDDUI8DW/0167642387900359.html:;Harel_1987_Statecharts.pdf:/home/chilken/repositories/git/thesis/zotero/storage/VRJAFK9C/Harel_1987_Statecharts.pdf:application/pdf}
}

@inproceedings{hilken_unified_2015,
  title = {{A} {Unified} {Formulation} of {Behavioral} {Semantics} for {SysML} {Models}},
  isbn = {978-989-758-083-3},
  url = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0005241602630271},
  abstract = {The SCITEPRESS Digital Library offers online access to all papers presented at INSTICC conferences, as well as a few conferences organized by others.},
  timestamp = {2015-11-22T02:01:48Z},
  urldate = {2015-11-22},
  author = {{Hilken}, Christoph and {Peleska}, Jan and {Wille}, Robert},
  month = feb,
  year = {2015},
  pages = {263--271},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/2N7CT6J3/Link.html:}
}

@article{herrmann_scalingup_2014,
  title = {Scaling-{Up} {Model}-{Based}-{Development} for {Large} {Heterogeneous} {Systems} with {Compositional} {Modeling}},
  url = {http://arxiv.org/abs/1409.6586},
  timestamp = {2015-11-21T21:14:35Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6586},
  author = {{Herrmann}, Christoph and {Krahn}, Holger and {Rumpe}, Bernhard and {Schindler}, Martin and {V{\"o}lkel}, Steven},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/J8FAMGRP/1409.html:;Herrmann et al_2014_Scaling-Up Model-Based-Development for Large Heterogeneous Systems with.pdf:/home/chilken/repositories/git/thesis/zotero/storage/NUU4FK8B/Herrmann et al_2014_Scaling-Up Model-Based-Development for Large Heterogeneous Systems with.pdf:application/pdf}
}

@article{baouya_quantitative_2015,
  title = {{A} quantitative verification framework of {SysML} activity diagrams under time constraints},
  volume = {42},
  issn = {0957-4174},
  url = {http://www.sciencedirect.com/science/article/pii/S0957417415003851},
  doi = {10.1016/j.eswa.2015.05.049},
  abstract = {Time-constrained and probabilistic verification approaches gain a great importance in system behavior validation including avionic, transport risk assessment, automotive systems and industrial process controllers. They enable the evaluation of system behavior according to the design requirements and ensure their correctness before any implementation. Due to the difficulty of analyzing, modeling and verifying these large scale systems, we introduce a novel verification framework based on PRISM probabilistic model checker that takes the SysML activity diagram as input and produce their equivalent timed probabilistic automata that is/are expressed in PRISM language. To check the functional correctness of the system under test, the properties are expressed in PCTL temporal logic. To prove the soundness of our mapping approach, we capture the underlying semantics of both the SysML activity diagrams and their generated PRISM code. We found that the timed probabilistic equivalence relation between both semantics preserve the satisfaction of the system requirements. We present digital camera as case study to illustrate the applicability of the proposed approach and to demonstrate its efficiency by analyzing a performability properties.},
  timestamp = {2015-11-20T11:30:58Z},
  number = {21},
  urldate = {2015-11-20},
  journal = {Expert {Systems} with {Applications}},
  author = {{Baouya}, Abdelhakim and {Bennouar}, Djamal and {Mohamed}, Otmane Ait and {Ouchani}, Samir},
  month = nov,
  year = {2015},
  keywords = {Model checking,PCTL,Probabilistic Timed Automata,SysML activity diagram},
  pages = {7493--7510},
  file = {Baouya et al_2015_A quantitative verification framework of SysML activity diagrams under time.pdf:/home/chilken/repositories/git/thesis/zotero/storage/92WNTCVE/Baouya et al_2015_A quantitative verification framework of SysML activity diagrams under time.pdf:application/pdf;ScienceDirect Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/ZT7K2BSW/S0957417415003851.html:}
}

@article{lasalle_development_2011,
  title = {Development of an automated {MBT} toolchain from {UML}/{SysML} models},
  volume = {7},
  issn = {1614-5046, 1614-5054},
  url = {http://link.springer.com/10.1007/s11334-011-0164-1},
  doi = {10.1007/s11334-011-0164-1},
  language = {en},
  timestamp = {2015-11-22T00:48:32Z},
  number = {4},
  urldate = {2015-11-22},
  journal = {Innovations in {Systems} and {Software} {Engineering}},
  author = {{Lasalle}, Jonathan and {Peureux}, Fabien and {Fondement}, Fr{\'e}d{\'e}ric},
  month = dec,
  year = {2011},
  pages = {247--256},
  file = {Lasalle et al_2011_Development of an automated MBT toolchain from UML-SysML models.pdf:/home/chilken/repositories/git/thesis/zotero/storage/XE4X6J38/Lasalle et al_2011_Development of an automated MBT toolchain from UML-SysML models.pdf:application/pdf}
}

@inproceedings{petrenko_modelbased_2015-1,
  title = {Model-based testing of automotive software: {Some} challenges and solutions},
  shorttitle = {Model-based testing of automotive software},
  doi = {10.1145/2744769.2747935},
  abstract = {Automotive software has been growing in size, criticality and complexity with each new generation of vehicles. Testing at the model and code level is an important step in validating the software against various types of defects that may be introduced in the development process. Model based testing (MBT) methodology, paves a road towards automation of testing activities. Test generation is a computationally complex task, which requires efficient constraint solving techniques and some guidance from the test engineer when this task cannot be solved by a tool. At the same time, automatic tools can hardly substitute domain testing experts which can develop more effective tests or at least test fragments than any tool. This is why we believe that future test generation tools should support {\textquotedblleft}tester-in-the-loop{\textquotedblright} MBT approaches. In this paper, we provide a brief report on our results in this direction.},
  timestamp = {2015-11-22T00:51:45Z},
  booktitle = {2015 52nd {ACM}/{EDAC}/{IEEE} {Design} {Automation} {Conference} ({DAC})},
  author = {{Petrenko}, A. and {Timo}, O.N. and {Ramesh}, S.},
  month = jun,
  year = {2015},
  keywords = {automatic tools,automotive engineering,automotive software,Bridges,code level testing,Computational modeling,constraint handling,constraint solving techniques,Context,development process,domain testing,extended state machines,finite state machines,Input variables,MBT methodology,model-based testing,program testing,program verification,Prototypes,Software,software defects,software validation,statecharts,test chaining,tester-in-the-loop,test generation,test generation tools,Testing,test models,test optimization,traffic engineering computing,vehicles},
  pages = {1--6},
  file = {Petrenko et al_2015_Model-based testing of automotive software.pdf:/home/chilken/repositories/git/thesis/zotero/storage/UHX598V8/Petrenko et al_2015_Model-based testing of automotive software.pdf:application/pdf;IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/XVEIZMHA/abs_all.html:}
}

@inproceedings{zhou_safety_2014-1,
  title = {{A} safety modeling method based on {SysML}},
  doi = {10.1109/ICRMS.2014.7107390},
  abstract = {As the scale and integration of the modern system increasing, the function interactions and coupling relationships in the system increase as well, which eventually makes the system complex more and more. The latent interaction hazards become more difficult to identify which make it harder to perform hazard analysis. The complex characteristics of hazard process in modern system are analyzed from different levels (i.e. same level, cross-level and multi-systems), according to which SysML is chosen to describe the hazard propagation process. A safety modeling technique based on SysML is proposed. Study the correspondence between different hazard propagation modes and SysML diagrams; Utilize SysML comprehensively and clearly to show hazard propagation. Using different SysML model figures to expound different hazard propagation modes, the safety model transformed from design model based on SysML could be acquired. Eventually, the validity of this method is demonstrated by a case study of SMR in flight control system.},
  timestamp = {2015-11-21T22:10:17Z},
  booktitle = {2014 {International} {Conference} on {Reliability}, {Maintainability} and {Safety} ({ICRMS})},
  author = {{Zhou}, Shanshan and {Jiao}, Jian and {Sun}, Qiang},
  month = aug,
  year = {2014},
  keywords = {aerospace computing,aerospace safety,Boolean functions,Couplings,Data structures,flight control system,hazard propagation,hazard propagation process,hazards,latent interaction hazards,Modeling,safety modeling,safety modeling method,SMR,SysML,System analysis and design},
  pages = {1180--1185},
  file = {IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/5IBMZGCU/login.html:}
}

@article{kapos_integrated_2014,
  title = {An integrated framework for automated simulation of {SysML} models using {DEVS}},
  volume = {90},
  issn = {0037-5497, 1741-3133},
  url = {http://sim.sagepub.com/content/90/6/717},
  doi = {10.1177/0037549714533842},
  abstract = {System models are constructed to design, study, and understand complex systems. According to the systems modeling language (SysML) that is a standard for model-based system engineering, all engineering activities should be performed using a common model. To validate complex system models defined in SysML, simulation is usually employed. There are numerous efforts to simulate SysML models using different simulation methods and tools. However, the efficient support of automated generation of executable simulation code is still an issue tangled by the research community. This paper introduces DEVSys, an integrated framework for utilizing existing SysML models and automatically producing executable discrete event simulation code, according to model driven architecture (MDA) concepts. Although this approach is not simulation-specific, discrete event system specification (DEVS) was employed, due to the similarities between SysML and DEVS, mainly in system structure description, and the mature, yet ongoing research on expressing executable DEVS models in a simulator-neutral manner. DEVSys framework elements include (a) a SysML profile for DEVS, enabling integration of simulation capabilities into SysML models, (b) a meta-model for DEVS, allowing the utilization of MDA concepts and tools, (c) a transformation of SysML models to DEVS models, using a standard model transformation language as query/view/transform (QVT), and (d) the generation of DEVS executable code for a DEVS simulation environment with an extensible markup language (XML) interface. The definition and implementation of DEVSys elements, as well as the process for its application are demonstrated and discussed, with the aid of a simple working example.},
  language = {en},
  timestamp = {2015-11-20T11:35:57Z},
  number = {6},
  urldate = {2015-11-20},
  journal = {{SIMULATION}},
  author = {{Kapos}, George-Dimitrios and {Dalakas}, Vassilis and {Nikolaidou}, Mara and {Anagnostopoulos}, Dimosthenis},
  month = jun,
  year = {2014},
  keywords = {automated code generation,case study,DEVS,MDA,model transformation,QVT,Simulation methodology,simulation tools,SysML},
  pages = {717--744},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/IFZ2NH6C/717.html:;Kapos et al_2014_An integrated framework for automated simulation of SysML models using DEVS.pdf:/home/chilken/repositories/git/thesis/zotero/storage/R94UG75A/Kapos et al_2014_An integrated framework for automated simulation of SysML models using DEVS.pdf:application/pdf}
}

@article{maoz_summarizing_2014,
  title = {Summarizing semantic model differences},
  url = {http://arxiv.org/abs/1409.2307},
  timestamp = {2015-11-21T21:13:47Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.2307},
  author = {{Maoz}, Shahar and {Ringert}, Jan Oliver and {Rumpe}, Bernhard},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/CPUJI7HW/1409.html:;Maoz et al_2014_Summarizing semantic model differences.pdf:/home/chilken/repositories/git/thesis/zotero/storage/RE8MTEDW/Maoz et al_2014_Summarizing semantic model differences.pdf:application/pdf}
}

@article{lasalle_sysml_2011,
  title = {{SysML} to {UML} {Model} {Transformation} for {Test} {Generation} {Purpose}},
  volume = {36},
  issn = {0163-5948},
  url = {http://doi.acm.org/10.1145/1921532.1921560},
  doi = {10.1145/1921532.1921560},
  abstract = {The work introduced in this paper is in line with an original Model-Based Testing approach by taking as input a SysML specification of a system under test and automatically translating it into an equivalent behavioural UML model. This generated UML model is finally used to derive test cases and executable test scripts. This test generation process is supported by an existing UML/OCL Model-Based Test generation tool. This paper focuses on the definition of the subset of SysML notation supported by this Model-Based Testing approach, and proposes rewriting rules to derive UML test model from SysML model},
  timestamp = {2015-11-22T00:36:38Z},
  number = {1},
  urldate = {2015-11-22},
  journal = {{SIGSOFT} {Softw}. {Eng}. {Notes}},
  author = {{Lasalle}, Jonathan and {Bouquet}, Fabrice and {Legeard}, Bruno and {Peureux}, Fabien},
  month = jan,
  year = {2011},
  pages = {1--8}
}

@inproceedings{petrenko_modelbased_2015,
  title = {Model-based testing of automotive software: {Some} challenges and solutions},
  shorttitle = {Model-based testing of automotive software},
  doi = {10.1145/2744769.2747935},
  abstract = {Automotive software has been growing in size, criticality and complexity with each new generation of vehicles. Testing at the model and code level is an important step in validating the software against various types of defects that may be introduced in the development process. Model based testing (MBT) methodology, paves a road towards automation of testing activities. Test generation is a computationally complex task, which requires efficient constraint solving techniques and some guidance from the test engineer when this task cannot be solved by a tool. At the same time, automatic tools can hardly substitute domain testing experts which can develop more effective tests or at least test fragments than any tool. This is why we believe that future test generation tools should support {\textquotedblleft}tester-in-the-loop{\textquotedblright} MBT approaches. In this paper, we provide a brief report on our results in this direction.},
  timestamp = {2015-11-22T00:51:40Z},
  booktitle = {2015 52nd {ACM}/{EDAC}/{IEEE} {Design} {Automation} {Conference} ({DAC})},
  author = {{Petrenko}, A. and {Timo}, O.N. and {Ramesh}, S.},
  month = jun,
  year = {2015},
  keywords = {automatic tools,automotive engineering,automotive software,Bridges,code level testing,Computational modeling,constraint handling,constraint solving techniques,Context,development process,domain testing,extended state machines,finite state machines,Input variables,MBT methodology,model-based testing,program testing,program verification,Prototypes,Software,software defects,software validation,statecharts,test chaining,tester-in-the-loop,test generation,test generation tools,Testing,test models,test optimization,traffic engineering computing,vehicles},
  pages = {1--6},
  file = {Petrenko et al_2015_Model-based testing of automotive software.pdf:/home/chilken/repositories/git/thesis/zotero/storage/9S2WND24/Petrenko et al_2015_Model-based testing of automotive software.pdf:application/pdf;IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/FPNGBHT2/abs_all.html:}
}

@inproceedings{olajubu_automated_2015,
  title = {Automated test case generation from domain specific models of high-level requirements},
  isbn = {978-1-4503-3738-0},
  url = {http://dl.acm.org/citation.cfm?doid=2811411.2811555},
  doi = {10.1145/2811411.2811555},
  language = {en},
  timestamp = {2015-11-22T00:33:07Z},
  urldate = {2015-11-22},
  publisher = {{ACM Press}},
  author = {{Olajubu}, Oyindamola and {Ajit}, Suraj and {Johnson}, Mark and {Turner}, Scott and {Thomson}, Scott and {Edwards}, Mark},
  year = {2015},
  pages = {505--508},
  file = {Olajubu et al_2015_Automated test case generation from domain specific models of high-level.pdf:/home/chilken/repositories/git/thesis/zotero/storage/P9E4NTAB/Olajubu et al_2015_Automated test case generation from domain specific models of high-level.pdf:application/pdf}
}

@inproceedings{ali_searchbased_2011,
  title = {{A} {Search}-{Based} {OCL} {Constraint} {Solver} for {Model}-{Based} {Test} {Data} {Generation}},
  doi = {10.1109/QSIC.2011.17},
  abstract = {Model-based testing (MBT) aims at automated, scalable, and systematic testing solutions for complex industrial software systems. To increase chances of adoption in industrial contexts, software systems should be modeled using well-established standards such as the Unified Modeling Language (UML) and Object Constraint Language (OCL). Given that test data generation is one of the major challenges to automate MBT, this is the topic of this paper with a specific focus on test data generation from OCL constraints. Though search-based software testing (SBST) has been applied to test data generation for white-box testing (e.g., branch coverage), its application to the MBT of industrial software systems has been limited. In this paper, we propose a set of search heuristics based on OCL constraints to guide test data generation and automate MBT in industrial applications. These heuristics are used to develop an OCL solver exclusively based on search, in this particular case genetic algorithm and (1+1) EA. Empirical analyses to evaluate the feasibility of our approach are carried out on one industrial system.},
  timestamp = {2015-11-22T00:52:55Z},
  booktitle = {2011 11th {International} {Conference} on {Quality} {Software} ({QSIC})},
  author = {{Ali}, S. and {Iqbal}, M.Z. and {Arcuri}, A. and {Briand}, L.},
  month = jul,
  year = {2011},
  keywords = {complex industrial software systems,constraint handling,Context,Data models,Empirical evaluation,formal verification,genetic algorithm,Genetic algorithms,model based test data generation,object constraint language,OCL,search based OCL constraint solver,Search-based testing,search heuristics,search problems,Software Engineering,systematic testing solutions,Test data,Testing,UML,Unified Modeling Language,white box testing},
  pages = {41--50},
  annote = {State machines and OCL},
  file = {Ali et al_2011_A Search-Based OCL Constraint Solver for Model-Based Test Data Generation.pdf:/home/chilken/repositories/git/thesis/zotero/storage/6G4FMUEM/Ali et al_2011_A Search-Based OCL Constraint Solver for Model-Based Test Data Generation.pdf:application/pdf;IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/FHDS9H9C/login.html:}
}

@article{ouchani_formal_2014,
  title = {{A} formal verification framework for {SysML} activity diagrams},
  volume = {41},
  issn = {0957-4174},
  url = {http://www.sciencedirect.com/science/article/pii/S0957417413008968},
  doi = {10.1016/j.eswa.2013.10.064},
  abstract = {SysML activity diagrams are OMG/INCOSE standard diagrams used for modeling and specifying probabilistic systems. They support systems composition by call behavior and send/receive artifacts. For verification, the existing approaches dedicated to these diagrams are limited to a restricted set of artifacts. In this paper, we propose a formal verification framework for these diagrams that supports the most important artifacts. It is based on mapping a composition of SysML activity diagrams to the input language of the probabilistic symbolic model checker called {\textquotedblleft}PRISM{\textquotedblright}. To prove the soundness of our mapping approach, we capture the underlying semantics of both the SysML activity diagrams and their generated PRISM code. We found that the probabilistic equivalence relation between both semantics preserve the satisfaction of the system requirements. Finally, we demonstrate the effectiveness of our approach by presenting real case studies.},
  timestamp = {2015-11-20T11:32:03Z},
  number = {6},
  urldate = {2015-11-20},
  journal = {Expert {Systems} with {Applications}},
  author = {{Ouchani}, Samir and {Mohamed}, Otmane A{\"\i}t and {Debbabi}, Mourad},
  month = may,
  year = {2014},
  keywords = {PCTL,Probabilistic automata,Probabilistic relation,SysML activity diagram},
  pages = {2713--2728},
  file = {Ouchani et al_2014_A formal verification framework for SysML activity diagrams.pdf:/home/chilken/repositories/git/thesis/zotero/storage/GD533P94/Ouchani et al_2014_A formal verification framework for SysML activity diagrams.pdf:application/pdf;ScienceDirect Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/S8SC7BHR/S0957417413008968.html:}
}

@incollection{gauthier_tooled_2015,
  series = {Lecture {Notes} in {Computer} {Science}},
  title = {Tooled {Process} for {Early} {Validation} of {SysML} {Models} {Using} {Modelica} {Simulation}},
  copyright = {{\textcopyright}2015 {IFIP} {International} {Federation} for {Information} {Processing}},
  isbn = {978-3-319-24643-7 978-3-319-24644-4},
  url = {http://link.springer.com/chapter/10.1007/978-3-319-24644-4_16},
  abstract = {The increasing complexity and heterogeneity of systems require engineers to consider the verification and validation aspects in the earliest stages of the system development life cycle. To meet these expectations, Model-Based Systems Engineering (MBSE) is identified as a key practice for efficient system development while simulation is still widely used by engineers to evaluate the performance and conformance of complex systems regarding requirements. To bridge the gap between high-level modeling (from requirements) and simulation, the present paper proposes a Model-Driven Engineering (MDE) tooled approach to automate the system requirements validation using SysML models and Modelica simulation. The implementation of the related toolchain has been officially adopted by the OMG SysML-Modelica working group.},
  language = {en},
  timestamp = {2015-11-22T01:25:03Z},
  number = {9392},
  urldate = {2015-11-22},
  booktitle = {Fundamentals of {Software} {Engineering}},
  publisher = {{Springer International Publishing}},
  author = {{Gauthier}, Jean-Marie and {Bouquet}, Fabrice and {Hammad}, Ahmed and {Peureux}, Fabien},
  editor = {{Dastani}, Mehdi and {Sirjani}, Marjan},
  month = apr,
  year = {2015},
  keywords = {Artificial Intelligence (incl. Robotics),Code Generation,Logics and Meanings of Programs,Modelica Simulation,model transformation,OMG Standard,Programming Languages; Compilers; Interpreters,Programming Techniques,Requirements Validation,Software Engineering,SysML Models},
  pages = {230--237},
  file = {Gauthier et al_2015_Tooled Process for Early Validation of SysML Models Using Modelica Simulation.pdf:/home/chilken/repositories/git/thesis/zotero/storage/8JRXM6V9/Gauthier et al_2015_Tooled Process for Early Validation of SysML Models Using Modelica Simulation.pdf:application/pdf;Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/VNJN37QU/10.html:}
}

@article{cengarle_systemmodelbased_2014,
  title = {System-model-based simulation of {UML} models},
  url = {http://arxiv.org/abs/1409.6622},
  timestamp = {2015-11-21T21:14:27Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6622},
  author = {{Cengarle}, Mar{\'\i}a Victoria and {Dingel}, Juergen and {Gr{\"o}nninger}, Hans and {Rumpe}, Bernhard},
  year = {2014},
  file = {Cengarle et al_2014_System-model-based simulation of UML models.pdf:/home/chilken/repositories/git/thesis/zotero/storage/9U24BQ9K/Cengarle et al_2014_System-model-based simulation of UML models.pdf:application/pdf;Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/XXM9T3SA/1409.html:}
}

@inproceedings{france_modeldriven_2007,
  title = {Model-driven development of complex software: {A} research roadmap},
  shorttitle = {Model-driven development of complex software},
  url = {http://dl.acm.org/citation.cfm?id=1254709},
  timestamp = {2015-11-21T22:09:20Z},
  urldate = {2015-11-21},
  booktitle = {2007 {Future} of {Software} {Engineering}},
  publisher = {{IEEE Computer Society}},
  author = {{France}, Robert and {Rumpe}, Bernhard},
  year = {2007},
  pages = {37--54},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/SMPKZ5KC/citation.html:;France_Rumpe_2007_Model-driven development of complex software.pdf:/home/chilken/repositories/git/thesis/zotero/storage/SW6XPSZI/France_Rumpe_2007_Model-driven development of complex software.pdf:application/pdf}
}

@article{harel_modeling_2000,
  title = {Modeling {Languages}: {Syntax}, {Semantics} and {All} {That} {Stu}},
  shorttitle = {Modeling {Languages}},
  url = {http://www4.in.tum.de/publ/papers/HR00.pdf},
  timestamp = {2015-11-21T22:09:05Z},
  urldate = {2015-11-21},
  author = {{Harel}, David and {Rumpe}, Bernhard},
  year = {2000},
  file = {Harel_Rumpe_2000_Modeling Languages.pdf:/home/chilken/repositories/git/thesis/zotero/storage/WW8K88JW/Harel_Rumpe_2000_Modeling Languages.pdf:application/pdf}
}

@article{lasalle_sysml_2011-1,
  title = {{SysML} to {UML} {Model} {Transformation} for {Test} {Generation} {Purpose}},
  volume = {36},
  issn = {0163-5948},
  url = {http://doi.acm.org/10.1145/1921532.1921560},
  doi = {10.1145/1921532.1921560},
  abstract = {The work introduced in this paper is in line with an original Model-Based Testing approach by taking as input a SysML specification of a system under test and automatically translating it into an equivalent behavioural UML model. This generated UML model is finally used to derive test cases and executable test scripts. This test generation process is supported by an existing UML/OCL Model-Based Test generation tool. This paper focuses on the definition of the subset of SysML notation supported by this Model-Based Testing approach, and proposes rewriting rules to derive UML test model from SysML model},
  timestamp = {2015-11-22T00:46:49Z},
  number = {1},
  urldate = {2015-11-22},
  journal = {{SIGSOFT} {Softw}. {Eng}. {Notes}},
  author = {{Lasalle}, Jonathan and {Bouquet}, Fabrice and {Legeard}, Bruno and {Peureux}, Fabien},
  month = jan,
  year = {2011},
  pages = {1--8}
}

@article{utting_taxonomy_2012-2,
  title = {{A} taxonomy of model-based testing approaches},
  volume = {22},
  copyright = {Copyright {\textcopyright} 2011 {John} {Wiley} \& {Sons}, {Ltd}.},
  issn = {1099-1689},
  url = {http://onlinelibrary.wiley.com/doi/10.1002/stvr.456/abstract},
  doi = {10.1002/stvr.456},
  abstract = {Model-based testing (MBT) relies on models of a system under test and/or its environment to derive test cases for the system. This paper discusses the process of MBT and defines a taxonomy that covers the key aspects of MBT approaches. It is intended to help with understanding the characteristics, similarities and differences of those approaches, and with classifying the approach used in a particular MBT tool. To illustrate the taxonomy, a description of how three different examples of MBT tools fit into the taxonomy is provided. Copyright {\textcopyright} 2011 John Wiley \& Sons, Ltd.},
  language = {en},
  timestamp = {2015-11-22T00:53:39Z},
  number = {5},
  urldate = {2015-11-22},
  journal = {Software {Testing}, {Verification} and {Reliability}},
  author = {{Utting}, Mark and {Pretschner}, Alexander and {Legeard}, Bruno},
  month = aug,
  year = {2012},
  keywords = {model-based testing approaches,survey,taxonomy},
  pages = {297--312},
  file = {Utting et al_2012_A taxonomy of model-based testing approaches.pdf:/home/chilken/repositories/git/thesis/zotero/storage/9HETFEJA/Utting et al_2012_A taxonomy of model-based testing approaches.pdf:application/pdf;Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/VNKVCNMX/abstract.html:}
}

@incollection{brucker_specificationbased_2010,
  series = {Lecture {Notes} in {Computer} {Science}},
  title = {{A} {Specification}-{Based} {Test} {Case} {Generation} {Method} for {UML}/{OCL}},
  copyright = {{\textcopyright}2011 {Springer} {Berlin} {Heidelberg}},
  isbn = {978-3-642-21209-3 978-3-642-21210-9},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-21210-9_33},
  abstract = {Automated test data generation is an important method for the verification and validation of UML/OCL specifications. In this paper, we present an extension of DNF-based test case generation methods to class models and recursive query operations on them. A key feature of our approach is an implicit representation of object graphs avoiding a representation based on object-id's; thus, our approach avoids the generation of isomorphic object graphs by using a concise and still human-readable symbolic representation.},
  language = {en},
  timestamp = {2015-11-22T00:38:07Z},
  number = {6627},
  urldate = {2015-11-22},
  booktitle = {Models in {Software} {Engineering}},
  publisher = {{Springer Berlin Heidelberg}},
  author = {{Brucker}, Achim D. and {Krieger}, Matthias P. and {Longuet}, Delphine and {Wolff}, Burkhart},
  editor = {{Dingel}, Juergen and {Solberg}, Arnor},
  month = oct,
  year = {2010},
  keywords = {Logics and Meanings of Programs,Management of Computing and Information Systems,OCL,Programming Languages; Compilers; Interpreters,Simulation and Modeling,Software Engineering,specification-based testing,Test case generation,UML},
  pages = {334--348},
  annote = {USES HOL/Isabelle to generate Testcases},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/GZD3MKHE/978-3-642-21210-9_33.html:;Brucker et al_2010_A Specification-Based Test Case Generation Method for UML-OCL.pdf:/home/chilken/repositories/git/thesis/zotero/storage/QNMT6WT2/Brucker et al_2010_A Specification-Based Test Case Generation Method for UML-OCL.pdf:application/pdf}
}

@article{rumpe_note_2014,
  title = {{A} {Note} on {Semantics} (with an {Emphasis} on {UML})},
  url = {http://arxiv.org/abs/1409.6926},
  timestamp = {2015-11-21T22:08:57Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6926},
  author = {{Rumpe}, Bernhard},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/6J45Q44V/1409.html:;Rumpe_2014_A Note on Semantics (with an Emphasis on UML).pdf:/home/chilken/repositories/git/thesis/zotero/storage/RB7M36GJ/Rumpe_2014_A Note on Semantics (with an Emphasis on UML).pdf:application/pdf}
}

@inproceedings{bouquet_subset_2007,
  address = {New {York}, {NY}, {USA}},
  series = {{A}-{MOST} '07},
  title = {{A} {Subset} of {Precise} {UML} for {Model}-based {Testing}},
  isbn = {978-1-59593-850-3},
  url = {http://doi.acm.org/10.1145/1291535.1291545},
  doi = {10.1145/1291535.1291545},
  abstract = {This paper presents an original model-based testing approach that takes a UML behavioural view of the system under test and automatically generates test cases and executable test scripts according to model coverage criteria. This approach is embedded in the LEIRIOS Test Designer tool and is currently deployed in domains such as Enterprise IT and electronic transaction applications. This model-based testing approach makes it possible to automatically produce the traceability matrix from requirements to test cases as part of the test generation process. This paper defines the subset of UML used for model-based testing and illustrates it using a small example.},
  timestamp = {2015-11-22T00:41:38Z},
  urldate = {2015-11-22},
  booktitle = {Proceedings of the 3rd {International} {Workshop} on {Advances} in {Model}-based {Testing}},
  publisher = {{ACM}},
  author = {{Bouquet}, F. and {Grandpierre}, C. and {Legeard}, B. and {Peureux}, F. and {Vacelet}, N. and {Utting}, M.},
  year = {2007},
  keywords = {model-based testing,OCL,UML},
  pages = {95--104},
  file = {Bouquet et al_2007_A Subset of Precise UML for Model-based Testing.pdf:/home/chilken/repositories/git/thesis/zotero/storage/XXCQSKM8/Bouquet et al_2007_A Subset of Precise UML for Model-based Testing.pdf:application/pdf}
}

@article{harel_meaningful_2004,
  title = {Meaningful modeling: what's the semantics of" semantics"?},
  volume = {37},
  shorttitle = {Meaningful modeling},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1350729},
  timestamp = {2015-11-21T22:09:13Z},
  number = {10},
  urldate = {2015-11-21},
  journal = {Computer},
  author = {{Harel}, David and {Rumpe}, Bernhard},
  year = {2004},
  pages = {64--72},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/EQ7ZTWHQ/login.html:;Harel_Rumpe_2004_Meaningful modeling.pdf:/home/chilken/repositories/git/thesis/zotero/storage/S9ZJWHZV/Harel_Rumpe_2004_Meaningful modeling.pdf:application/pdf}
}

@inproceedings{seidewitz_uml_2014,
  address = {New {York}, {NY}, {USA}},
  series = {{HILT} '14},
  title = {{UML} with {Meaning}: {Executable} {Modeling} in {Foundational} {UML} and the {Alf} {Action} {Language}},
  isbn = {978-1-4503-3217-0},
  shorttitle = {{UML} with {Meaning}},
  url = {http://doi.acm.org/10.1145/2663171.2663187},
  doi = {10.1145/2663171.2663187},
  abstract = {To most in the software community, "modeling" is drawing pictures, something much different than "coding". While programming languages must be specified precisely enough to be executable, this has not necessarily been the case for modeling languages. Indeed, the well-known Unified Modeling Language (UML) has for years had a specification that is far from precise. However, precise models are quite common in other engineering disciplines, and there has been a minority even in software engineering that have created models that are precise enough to be, themselves, executable. Over the last decade, the UML community has more generally come to realize the benefits of having at least a subset of UML specified with precise execution semantics. While not all models need to be executable, executable models can support early testing and analysis of the design of critical software systems, as well as supporting simulation for communities using UML for modeling beyond just software (such as SysML for systems engineering). As a result, there has been a great deal of work in recent years toward the standardization of precise, executable semantics for UML models - the "meaning" behind the pictures: Foundational UML (fUML), the Action Language for fUML (Alf) and the recently completed Precise Semantics for UML Composite Structures. These new specifications provide the promise of widespread support for executable modeling across the many UML tools now on the market.},
  timestamp = {2015-11-20T11:36:50Z},
  urldate = {2015-11-20},
  booktitle = {Proceedings of the 2014 {ACM} {SIGAda} {Annual} {Conference} on {High} {Integrity} {Language} {Technology}},
  publisher = {{ACM}},
  author = {{Seidewitz}, Ed},
  year = {2014},
  keywords = {action languages,executable modeling,system modeling,UML},
  pages = {61--68},
  file = {Seidewitz_2014_UML with Meaning.pdf:/home/chilken/repositories/git/thesis/zotero/storage/X6CKFBZE/Seidewitz_2014_UML with Meaning.pdf:application/pdf}
}

@article{evans_developing_2014,
  title = {Developing the {UML} as a formal modelling notation},
  url = {http://arxiv.org/abs/1409.6928},
  timestamp = {2015-11-21T21:14:55Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.6928},
  author = {{Evans}, Andy and {France}, Robert and {Lano}, Kevin and {Rumpe}, Bernhard},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/EBDZI628/1409.html:;Evans et al_2014_Developing the UML as a formal modelling notation.pdf:/home/chilken/repositories/git/thesis/zotero/storage/M5HA2MC4/Evans et al_2014_Developing the UML as a formal modelling notation.pdf:application/pdf}
}

@inproceedings{hansch_isoiec_2014,
  title = {An {ISO}/{IEC} 15118 conformance testing system architecture},
  doi = {10.1109/PESGM.2014.6938863},
  abstract = {A major goal for the ISO/IEC15118 standard for controlling the charging process for electric vehicles is the simplicity and reliability of use. Severe threats for a simple use are implementations of the standard which are not interoperable to each other. A traditional approach to reduce this threat is the setup of testivals between all implementations to explicit test interoperability. However this approach is complex and expensive as it requires extensive test and the coordination between all implementers. The project eNterop takes a different approach to enable a broad acceptance of the ISO/IEC 15118 and IEC 61851 specification on the market and to facilitate a large number of implementations. It defines conformance tests which can be fully automated. This is a quite new approach for machine to machine interface specifications which not only cover communication but also power interfaces. With that implementers can independently test their protocols including the power flow control and increase the likelihood of interoperable implementations without expensive testivals. This paper presents the approach of conformance tests for combined communication and power interfaces.},
  timestamp = {2015-11-20T11:35:40Z},
  booktitle = {2014 {IEEE} {PES} {General} {Meeting} | {Conference} {Exposition}},
  author = {{Hansch}, K. and {Pelzer}, A. and {Komarnicki}, P. and {Groning}, S. and {Schmutzler}, J. and {Wietfeld}, C. and {Heuer}, J. and {Muller}, R.},
  month = jul,
  year = {2014},
  keywords = {Automatic testing,electric vehicles,eNterop,IEC 61851,IEC standards,ISO IEC 15118,ISO/IEC 15118 conformance testing system,ISO standards,load flow control,machine to machine interface,Ports (Computers),power flow control,power interfaces,protocols,secondary cells,Smart grid,System testing,Testing,Unified Modeling Language},
  pages = {1--5},
  file = {Hansch et al_2014_An ISO-IEC 15118 conformance testing system architecture.pdf:/home/chilken/repositories/git/thesis/zotero/storage/N4SKU43X/Hansch et al_2014_An ISO-IEC 15118 conformance testing system architecture.pdf:application/pdf;IEEE Xplore Abstract Record:/home/chilken/repositories/git/thesis/zotero/storage/W74DN2B4/abs_all.html:}
}

@article{maoz_operational_2014,
  title = {An operational semantics for activity diagrams using {SMV}},
  url = {http://arxiv.org/abs/1409.2356},
  timestamp = {2015-11-21T21:13:32Z},
  urldate = {2015-11-21},
  journal = {{arXiv} preprint {arXiv}:1409.2356},
  author = {{Maoz}, Shahar and {Ringert}, Jan Oliver and {Rumpe}, Bernhard},
  year = {2014},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/43DZJZ4C/1409.html:;Maoz et al_2014_An operational semantics for activity diagrams using SMV.pdf:/home/chilken/repositories/git/thesis/zotero/storage/PVRU9RCA/Maoz et al_2014_An operational semantics for activity diagrams using SMV.pdf:application/pdf}
}

@article{sakairi_model_2013,
  title = {Model {Based} {Control} {System} {Design} {Using} {sysML}, {Simulink}, and {Computer} {Algebra} {System}},
  volume = {2013},
  issn = {1687-5249},
  url = {http://dx.doi.org/10.1155/2013/485380},
  doi = {10.1155/2013/485380},
  abstract = {The Systems Modeling Language (SysML) is a standard, general-purpose, modeling language formodel-based systems engineering (MBSE). SysML supports the specification, analysis, and design of a broad range of complex systems such as control systems. The authors demonstrate how they can integrate a SysML modeling tool (IBM Rational Rhapsody) with a proprietary simulation tool (Math Works Simulink) and a Computer Algebra System (CAS) to validate system specification. The integration with Simulink enables users to perform systems engineering process in a SysML model, while designing continuous control algorithms and plant behavior in Simulink, and to validate the behavior by simulating the overall composition in Simulink. The integration with a CAS enables the evaluation of mathematical constraints defined in SysML parametric diagrams. The authors also show the overall approach using a Dual Clutch Transmission (DCT) and a Cruise Control System as examples.},
  timestamp = {2015-11-22T02:19:58Z},
  urldate = {2015-11-22},
  journal = {{J}. {Control} {Sci}. {Eng}.},
  author = {{Sakairi}, Takashi and {Palachi}, Eldad and {Cohen}, Chaim and {Hatsutori}, Yoichi and {Shimizu}, Junya and {Miyashita}, Hisashi},
  month = jan,
  year = {2013},
  pages = {9:9--9:9},
  file = {Sakairi et al_2013_Model Based Control System Design Using sysML, Simulink, and Computer Algebra.pdf:/home/chilken/repositories/git/thesis/zotero/storage/99PMMSU6/Sakairi et al_2013_Model Based Control System Design Using sysML, Simulink, and Computer Algebra.pdf:application/pdf}
}

@comment{jabref-meta: groupsversion:3;}
@comment{jabref-meta: groupstree:
0 AllEntriesGroup:;
1 ExplicitGroup:DAC-Paper\;0\;harel_statecharts_1987\;kapos_integrated
_2014\;zhou_safety_2014\;anand_orchestrated_2013\;dick_automating_1993
\;schieferdecker_modelbased_2012\;schamai_unified_2009\;paredis_551_20
10-1\;sakairi_model_2013\;;
2 ExplicitGroup:other approaches\;0\;hause_testing_2010\;anand_orchest
rated_2013\;lasalle_sysml_2011\;brucker_specificationbased_2010\;bouqu
et_subset_2007\;lasalle_development_2011\;petrenko_modelbased_2015\;al
i_searchbased_2011\;gauthier_tooled_2015\;hilken_unified_2015\;;
2 ExplicitGroup:integration of physical models\;0\;schamai_unified_200
9\;paredis_551_2010-1\;sakairi_model_2013\;;
1 ExplicitGroup:other approaches\;0\;hause_testing_2010\;anand_orchest
rated_2013\;lasalle_sysml_2011\;brucker_specificationbased_2010\;bouqu
et_subset_2007\;lasalle_development_2011\;petrenko_modelbased_2015\;al
i_searchbased_2011\;gauthier_tooled_2015\;hilken_unified_2015\;;
1 ExplicitGroup:integration of physical models\;0\;schamai_unified_200
9\;paredis_551_2010-1\;sakairi_model_2013\;;
}


@misc{schamai_unified_2009,
  title = {Towards {Unified} {System} {Modeling} and {Simulation} with {ModelicaML}: {Modeling} of {Executable} {Behavior} {Using} {Graphical} {Notations}},
  shorttitle = {Towards {Unified} {System} {Modeling} and {Simulation} with {ModelicaML}},
  timestamp = {2015-11-22T02:05:11Z},
  author = {{Schamai}, Wladimir},
  year = {2009},
  file = {Schamai_2009_Towards Unified System Modeling and Simulation with ModelicaML.pdf:/home/chilken/repositories/git/thesis/zotero/storage/542Z29MI/Schamai_2009_Towards Unified System Modeling and Simulation with ModelicaML.pdf:application/pdf;Towards Unified System Modeling and Simulation with ModelicaML\: Modeling of Executable Behavior Using Graphical Notations | Model-Based Systems Engineering Center:/home/chilken/repositories/git/thesis/zotero/storage/QAF3DRPR/towards-unified-system-modeling-and-simulation-modelicaml-modeling-executable-behavior-using-gr.html:}
}

@article{paredis_551_2010-1,
  title = {5.5.1 {An} {Overview} of the {SysML}-{Modelica} {Transformation} {Specification}},
  volume = {20},
  copyright = {{\textcopyright} 2010 {The} {Authors}},
  issn = {2334-5837},
  url = {http://onlinelibrary.wiley.com/doi/10.1002/j.2334-5837.2010.tb01099.x/abstract},
  doi = {10.1002/j.2334-5837.2010.tb01099.x},
  abstract = {This paper provides an overview of the formal transformation between the two complementary languages: OMG SysML{\texttrademark} and Modelica. SysML is a standardized general purpose graphical modeling language for capturing complex system descriptions in terms of their structure, behavior, properties, and requirements. Modelica is a standardized general purpose systems modeling language for analyzing the continuous and discrete time dynamics of complex systems in terms of differential algebraic equations. Integrating the descriptive power of SysML models with the analytic and computational power of Modelica models provides a capability that is significantly greater than provided by SysML or Modelica individually. A standardized bi-directional transformation between the two modeling languages is being developed that will support implementations to transfer efficiently and automatically the modeling information between SysML and Modelica models without ambiguity. In addition to an overview of this bi-directional transformation approach, the paper provides a simple example to clarify the transformation principles and to illustrate the important synergies resulting from the integration between these two languages.},
  language = {en},
  timestamp = {2015-11-22T02:13:40Z},
  number = {1},
  urldate = {2015-11-22},
  journal = {{INCOSE} {International} {Symposium}},
  author = {{Paredis}, Christiaan J.J. and {Bernard}, Yves and {Burkhart}, Roger M and {de Koning}, Hans-Peter and {Friedenthal}, Sanford and {Fritzson}, Peter and {Rouquette}, Nicolas F and {Schamai}, Wladimir},
  month = jul,
  year = {2010},
  pages = {709--722},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/4TAJVBJV/abstract.html:;Paredis et al_2010_5.pdf:/home/chilken/repositories/git/thesis/zotero/storage/ERMVJG43/Paredis et al_2010_5.pdf:application/pdf;Paredis et al_2010_5.pdf:/home/chilken/repositories/git/thesis/zotero/storage/WIAW4CFW/Paredis et al_2010_5.pdf:application/pdf}
}

@article{sakairi_model_2013,
  title = {Model {Based} {Control} {System} {Design} {Using} {sysML}, {Simulink}, and {Computer} {Algebra} {System}},
  volume = {2013},
  issn = {1687-5249},
  url = {http://dx.doi.org/10.1155/2013/485380},
  doi = {10.1155/2013/485380},
  abstract = {The Systems Modeling Language (SysML) is a standard, general-purpose, modeling language formodel-based systems engineering (MBSE). SysML supports the specification, analysis, and design of a broad range of complex systems such as control systems. The authors demonstrate how they can integrate a SysML modeling tool (IBM Rational Rhapsody) with a proprietary simulation tool (Math Works Simulink) and a Computer Algebra System (CAS) to validate system specification. The integration with Simulink enables users to perform systems engineering process in a SysML model, while designing continuous control algorithms and plant behavior in Simulink, and to validate the behavior by simulating the overall composition in Simulink. The integration with a CAS enables the evaluation of mathematical constraints defined in SysML parametric diagrams. The authors also show the overall approach using a Dual Clutch Transmission (DCT) and a Cruise Control System as examples.},
  timestamp = {2015-11-22T02:19:58Z},
  urldate = {2015-11-22},
  journal = {{J}. {Control} {Sci}. {Eng}.},
  author = {{Sakairi}, Takashi and {Palachi}, Eldad and {Cohen}, Chaim and {Hatsutori}, Yoichi and {Shimizu}, Junya and {Miyashita}, Hisashi},
  month = jan,
  year = {2013},
  pages = {9:9--9:9},
  file = {Sakairi et al_2013_Model Based Control System Design Using sysML, Simulink, and Computer Algebra.pdf:/home/chilken/repositories/git/thesis/zotero/storage/99PMMSU6/Sakairi et al_2013_Model Based Control System Design Using sysML, Simulink, and Computer Algebra.pdf:application/pdf}
}

@incollection{hubner_experimental_2015,
  series = {Lecture {Notes} in {Computer} {Science}},
  title = {Experimental {Evaluation} of a {Novel} {Equivalence} {Class} {Partition} {Testing} {Strategy}},
  copyright = {{\textcopyright}2015 {Springer} {International} {Publishing} {Switzerland}},
  isbn = {978-3-319-21214-2 978-3-319-21215-9},
  url = {http://link.springer.com/chapter/10.1007/978-3-319-21215-9_10},
  abstract = {In this paper, a novel complete model-based equivalence class testing strategy is experimentally evaluated. This black-box strategy applies to deterministic systems with infinite input domains and finite internal state and output domains. It is complete with respect to a given fault model. This means that conforming behaviours will never be rejected, and all nonconforming behaviours inside a given fault domain will be uncovered. We investigate the question how this strategy performs for systems under test whose behaviours lie outside the fault domain. Furthermore, a strategy extension is presented, that is based on randomised data selection from input equivalence classes. While this extension is still complete with respect to the given fault domain, it also promises a higher test strength when applied against members outside this domain. This is confirmed by an experimental evaluation that compares mutation coverage achieved by the original and the extended strategy with the coverage obtained by random testing.},
  language = {en},
  timestamp = {2015-11-22T02:28:24Z},
  number = {9154},
  urldate = {2015-11-22},
  booktitle = {Tests and {Proofs}},
  publisher = {{Springer International Publishing}},
  author = {{H{\"u}bner}, Felix and {Huang}, Wen-ling and {Peleska}, Jan},
  editor = {{Blanchette}, Jasmin Christian and {Kosmatov}, Nikolai},
  month = jul,
  year = {2015},
  keywords = {Adaptive random testing,Equivalence class partition testing,Logics and Meanings of Programs,Mathematical Logic and Formal Languages,model-based testing,Programming Languages; Compilers; Interpreters,Programming Techniques,Simulation and Modeling,Software Engineering,State Transition Systems,SysML},
  pages = {155--172},
  file = {Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/H4AT6FDH/10.html:;Hübner et al_2015_Experimental Evaluation of a Novel Equivalence Class Partition Testing Strategy.pdf:/home/chilken/repositories/git/thesis/zotero/storage/P4MHXZ28/Hübner et al_2015_Experimental Evaluation of a Novel Equivalence Class Partition Testing Strategy.pdf:application/pdf}
}

@article{huang_complete_2014,
  title = {Complete model-based equivalence class testing},
  issn = {1433-2779, 1433-2787},
  url = {http://link.springer.com/article/10.1007/s10009-014-0356-8},
  doi = {10.1007/s10009-014-0356-8},
  abstract = {In this article, we present a model-based black-box equivalence partition testing strategy, together with a formal proof of its completeness properties. The results apply to reactive systems with large, possibly infinite input data types and finite internal and output data ranges that may be enumerated with acceptable effort. The investigation is performed on a semantic level and applies to all concrete test models whose behavioural semantics can be encoded as a variant of state transition systems. Test suite construction is performed in relation to a given fault model F\ensuremath{\backslash}mathcal\{F\} for which a finite black-box test suite can be constructed which is complete with respect to F\ensuremath{\backslash}mathcal\{F\}. It is shown how the test suite generation can be effectively implemented by model-based testing tools, using propositional representations of behavioural model semantics and constraint solvers. A SysML model of the ceiling speed monitoring function of the European Train Control System is presented as a case study, to explain theory application to a concrete modelling formalism.},
  language = {en},
  timestamp = {2015-11-22T02:28:30Z},
  urldate = {2015-11-22},
  journal = {International {Journal} on {Software} {Tools} for {Technology} {Transfer}},
  author = {{Huang}, Wen-ling and {Peleska}, Jan},
  month = nov,
  year = {2014},
  keywords = {Complete test strategies,Equivalence class partition testing,model-based testing,Software Engineering,Software Engineering/Programming and Operating Systems,State Transition Systems,SysML state machines,Theory of Computation},
  pages = {1--19},
  file = {Huang_Peleska_2014_Complete model-based equivalence class testing.pdf:/home/chilken/repositories/git/thesis/zotero/storage/9TXD8ZRC/Huang_Peleska_2014_Complete model-based equivalence class testing.pdf:application/pdf;Snapshot:/home/chilken/repositories/git/thesis/zotero/storage/ZKGE5BMF/s10009-014-0356-8.html:}
}


